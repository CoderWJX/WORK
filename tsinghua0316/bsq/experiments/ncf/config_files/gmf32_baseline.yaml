# Experiment name
name: gmf32_baseline

output_dir: out

debug: true

# Device to be used
device:
  # Use CPU or GPU (choices: cpu, cuda)
  type: cuda
  # GPU device IDs to be used. Only valid when device.type is 'cuda'
  gpu: [9,]
GMF_path: 
MLP_path: 
# dataset name
dataloader:
  dataset: 'ml-1m'
  #assert dataset in ['ml-1m', 'pinterest-20']
  path: '/root/code/quant/NCF/neural_collaborative_filtering/Data/'
  batch_size: 256
  top_k: 10
  num_ng: 4
  test_num_ng: 99
  batch_size: 256
  # Number of data loading workers
  workers: 8
  # Seeds random generators in a deterministic way (i.e., set all the seeds 0).
  # Please keep it true when resuming the experiment from a checkpoint
  deterministic: false
  user_num: 6040
  item_num: 3706
  

arch: gmf32


#'baseline','quant','inference'
task_name: 'baseline'

pretrained_path: 
#/root/code/quant/NCF/NCF/out/GMF32_20211106-003324/GMF32_model.pth

quan:
  ptq_batches: 1000
  act: # (default for all layers)
    # Quantizer type (choices: actquan)
    mode: actquan
    # Bit width of quantized activation
    bit: 8
    all_positive: true
    per_channel: false
    symmetric: false

  weight: # (default for all layers)
    # Quantizer type (choices: weightquan)
    mode: weightquan
    bit: 8
    all_positive: false
    per_channel: true
    symmetric: true
  excepts:
    # Specify quantized bit width for some layers, like this:
    predict_layer:
      act:
        bit: 
      weight:
        bit: 
    #embed_user_GMF:
      #act:
      #bit:
      #weight:
      #bit:            
      #embed_item_GMF:
      #act:
      #bit:
      #weight:
      #bit:            
    MLP_layers.1:
      act:
        bit: 16
        all_positive: false
        per_channel: false
        symmetric: true
      weight:
        bit: 16

epochs: 20

optimizer:
  type: Adam
  weight:
    learning_rate: 0.0010
    momentum: 0.9
    weight_decay: 0.00000
  quant:
    learning_rate: 0.0001
    momentum: 0.9
    weight_decay: 0.0
  other:
    learning_rate: 0.0010
    momentum: 0.9
    weight_decay: 0.00000

# Learning rate scheduler
lr_scheduler:
  type: multistep
  milestones: [40, 46]
  gamma: 0.1
